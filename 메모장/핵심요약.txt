핵식만 쏙쏙

언어세팅
reqeust.setCharacterEncoding("UTF-8");
페이지이동
String url="";
RequestDispatcher dispatcher = request.getRequestDispatcher(url);
dispatcher.forward(request,response);

response.sendRedirect();

데이터 같이 보내기
reqeust.setAttribute("boardList",boardList);

데이터 받기
getAttribute("boarList")

#표현언어와 JSTL
목적 : 코드 간결, 가독성 향상
EL(Expression Language)
JSTL(JSP Standard Tag Library)
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt"%>
prefix="c" : 태그에서 사용할 접두사
uri="http://java.sun.com/jsp/jstl/core" : 사용할 태그 라이브러리 식별자

<c:forEach [var="변수이름"] items="배열과 같은 집합체">
몸체
</c:forEach>


<c:forEach var="board" items="${boarList}">
몸체
</c:forEach>

자바 표현식 : <%="HELLO"%>
표현언어  : ${"Hello"}

--------------------------------------------------------------------------------
*** #싱글톤 패턴 (DAO 에서도 사용)*** 동그라미 만들기
인스턴스가 오로지 단 하나만 존재할 수 있도록 클래스를 설계하는 것
객체를 메모리에 단 한번만 올려놓고 시스템 전반에 걸쳐 특정한 자원을 공유할 때 사용함

private [클래스명](){
}
private static [클래스명] instance = new [클래스명]();

public static [클래스명] getInstance() {
  return instance;
}
--------------------------------------------------------------------------------


클래스명 변수명 = 클래스명.getInstance();

한번의 객체 생성으로 메모리를 효율적으로 관리하려는 목적

#
데이터베이스 커넥션 풀(DBCP : Database Connection Poll)
세션 & 쿠키 : 상태 유지를 위한 기술

쿠키
Cookie c = new Cookie("username","admin");
c.setMaxAge(365*24*60*60);
response.addCookie(c);
response.addCookie(new Cookie("password","123456"));

클라이언트
Cookie[] cookies = request.getCookies();
for (Cookie c : cookies){
   out.println(c.getName() + " : " + c.getValue()+"<br>");
}

Cookie c = new Cookie("username","");
c.setMaxAge(0);
response.addCookie(c);

쿠키 메소드
void setComment(String) : 쿠키에 대한 설명을 설정
void setDomain(String) : 쿠키의 유효한 도메인을 설정
void setMaxAge(String) : 쿠키의 유효한 기간을 설정
void setPath(String) : 쿠키의 유효한 디렉토리를 설정
void setSecure(String) : 쿠키의 보안을 설정
void setValue(String) : 쿠키의 값을 설정
void setVersion(String) : 쿠키의 버전을 설정

void setComment(String)
void setComment(String)
void setComment(String)
void setComment(String)
void setComment(String)
void setComment(String)
void setComment(String)

세션
내장 객체 : session
중요한 세션 메서드
void setAttribute(String name,Object value) : 세션에 지정된 이름에 객체를 추가한다.
Object getAttribute(String name) : 이름에 해당되는 객체 값을 가져온다. 없을 경우에는 null을 반환한다.
반환값은 Object형이므로 반드시 형 변환을 하여 사용해야 한다.

session.setAttribute("username","admin");
String username = (String)session.getAttribute("username");
Integer age = (Integer)session.getAttribute("age");
out.println(username);

세션 메서드
Enumeration getAttributeNames()
long getCreateTime()
String getId()
long getLastAccessTime()
int getMaxInactiveInterval()
boolean isNew()
void removeAttribute(String name)
void setMaxInactiveInterval(int interval)
void invalidate()

---------------------------------------------------------------------------------------------------------
존나 중요
파일 복붙하고 x표시 나면
프로젝트 -> 가장 아래 클릭 -> Axis2 Wev Serices 클릭 - > 우측에 Runtimes 들어간 후 ->아파치 톰켓 9.0 new -> 저장
---------------------------------------------------------------------------------------------------------
프로젝트 만들기
file -> new -> 위에서 3번째 클릭 -> 이름과 Target runtime 옆에 New Runtime 클릭 후 아파치 톰켓 9.0버전 설정 후 -> next 하고 마지막 체크박스만 체크하고 설정하기
---------------------------------------------------------------------------------------------------------
서블릿 만들기
file -> new -> 서블릿 -> 패키지명과 파일명 만든 후 -> URL mappings 아래칸의 이름을 내가 원하는 문구로 변경 후 -> do get / do post 만 선택후 저장
---------------------------------------------------------------------------------------------------------
프로젝트 만들고 lib파일에 " jstl-1.2jar & mysql-connector-j-8.0.32.jar 파일 넣어두기



