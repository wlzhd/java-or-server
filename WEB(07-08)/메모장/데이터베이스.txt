#mysql 설치

netstat -ant | grep 3306 // DB 3306 나오나 확인하는 명령어

show databases; // DB 뭐있냐?
show tables; // table 에뭐있냐?



drop tabls 테이블 명; // 테이블 삭제

apt -y install mariadb-server 
nano /etc/mysql/mariadb.conf.d/50-server.cnf 
mysql_secure_installation 
n
n
y
y
y
y

데이터베이스 초기화
systemctl stop mariadb
rm -rf /var/lib/mysql/*
mysql_install_db --datadir=/var/lib/mysql 
데이터베이스 다시시작
systemctl start mariadb 


#접속 및 외부 접속 허용
nano /etc/mysql/mariadb.conf.d/50-server.cnf
bind-address            = 127.0.0.1 를 주석처리하고
bind-address	  = 0.0.0.0 을 추가한다. 다음과 같이
#bind-address            = 127.0.0.1 
bind-address	  = 0.0.0.0
systemctl restart mariadb

show databases;
show tables;
use master;

GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '패스워드';
GRANT ALL PRIVILEGES ON *.* TO 'root'@'192.168.0.%' IDENTIFIED BY '패스워드';
GRANT ALL PRIVILEGES ON *.* TO 'root'@'192.168.0.XXX' IDENTIFIED BY '패스워드';
DELETE FROM mysql.user WHERE Host='%' AND User='유저명';
FLUSH PRIVILEGES;

#계정추가
sudo mysql -u root -p
create database master;
create user master@localhost identified by '123456';
grant all on master.* to master@localhost;
flush privileges;

#외부 접속 허용
sudo mysql -u root -p
create database master;
create user master@localhost identified by '123456'; // 계정 만들기
grant all on master.* to master@localhost; // DB master의 계정을 master@localhost 이 사람만 사용한다 라는 명령어임
flush privileges;

create database master;
create user master@192.168.0.201 identified by '123456';
grant all on master.* to master@192.168.0.201;
flush privileges;



#테이블 만들기
create table member(

primary key()
)


create table member(
idx int not null auto_increment,
course varchar(1),
gisu varchar(1),
name varchar(1),
gender varchar(1),
regdate datetime,
primary key(idx)
);

create table member(
idx int not null auto_increment,
course varchar(100) not null,
gisu varchar(100) not null,
name varchar(100) not null,
gender varchar(100) not null,
regdate datetime not null,
primary key(idx)
);

create table member(
idx int not null auto_increment,
username varchar(100) not null,
passsword varchar(100) not null,
course varchar(100) not null,
gisu varchar(100) not null,
name varchar(100) not null,
gender varchar(100) not null,
phone varchar(100) not null,
email varchar(100) not null,
regdate datetime not null,
primary key(idx)
) engine=innoDB;

create table score(
idx int not null auto_increment,
midx int not null,
part1 int not null,
part2 varchar(100) not null,
part3 varchar(100) not null,
part4 varchar(100) not null,
part5 varchar(100) not null,
part6 varchar(100) not null,
regdate datetime not null,
primary key(idx),
constraint m_fk foreign key(midx)
references member(idx)
) engine=innoDB;
// <- foreign key = midx
무결성규칙

더미 데이터 저장
insert into member(idx,course,gisu,name,gender,regdate) values(1,'산대특','2기','박현미','여','2023-07-06');
insert into member(idx,course,gisu,name,gender,regdate) values(2,'산대특','2기','김민후','남','2023-07-06');
insert into member(idx,course,gisu,name,gender,regdate) values(3,'산대특','2기','서우진','남','2023-07-06');
insert into member(idx,course,gisu,name,gender,regdate) values(4,'산대특','2기','송동엽','남','2023-07-06');
insert into member(idx,course,gisu,name,gender,regdate) values(5,'산대특','2기','이성찬','남','2023-07-06');
insert into member(idx,course,gisu,name,gender,regdate) values(6,'산대특','2기','정승원','남','2023-07-06');
insert into member(idx,course,gisu,name,gender,regdate) values(7,'산대특','2기','임태현','남','2023-07-06');
insert into member(idx,course,gisu,name,gender,regdate) values(8,'산대특','2기','강다현','여','2023-07-06');
insert into member(idx,course,gisu,name,gender,regdate) values(9,'산대특','2기','윤강준','남','2023-07-06');
insert into member(idx,course,gisu,name,gender,regdate) values(10,'산대특','2기','최다은','여','2023-07-06');
insert into member(idx,course,gisu,name,gender,regdate) values(11,'산대특','2기','소영수','남','2023-07-06');
insert into member(idx,course,gisu,name,gender,regdate) values(12,'산대특','2기','양세희','여','2023-07-06');
insert into member(idx,course,gisu,name,gender,regdate) values(13,'산대특','2기','장재원','남','2023-07-06');
insert into member(idx,course,gisu,name,gender,regdate) values(14,'산대특','2기','주일권','남','2023-07-06');
insert into member(idx,course,gisu,name,gender,regdate) values(15,'산대특','2기','김지성','남','2023-07-06');
insert into member(idx,course,gisu,name,gender,regdate) values(16,'산대특','2기','이성원','남','2023-07-06');

더미 데이터 저장
insert into score(idx,midx,part1,part2,part3,part4,part5,part6,regdate) values('홍길동','연습','연습','');
insert into score(idx,midx,part1,part2,part3,part4,part5,part6,regdate) values(2,2,100,100,100,100,100,100,'2023-07-06');
insert into score(idx,midx,part1,part2,part3,part4,part5,part6,regdate) values(3,2,100,100,100,100,100,100,'2023-07-06');

#테이블 삭제
drop table member

#테이블 구조
desc member

#테이터 보기
select * from member;
select * from member oder by idx asc; <- 오름차
select * from member oder by idx desc; <- 내림차
select * from member where name='홍길동';

#테이블 구조 변경
alter table 테이블명 
add 필드 이름 자료형
drop column 필드 이름
change column 기존 필드 이름 새 필드 이름 자료형;

alter table member add phone varchar(100);
alter table member drop column phone;


#데이터수정하기
update member set name='홍길순' where idx=1;
#데이터삭제하기

delete from meber where idx=1;

#데이터완전삭제
truncate table member;


*** #JSP와 데이터베이스 ***
1. java.sql.* 패키지 임포트
2. jdbc 드라이버 로딩
3. 데이터베이스 접속을 위한 Connection 객체 생성
4. 쿼리문을 실행시키기 위한 Statement/PreparedStatement/CallableStatement 객체 생성
5. 쿼리 실행
6. 쿼리 실행 결과값(int,ResultSet) 사용
7. 사용된 객체 종료 (ResultSet,S/P/C, Connection) 종료

JDBC드라이버 로딩
Connection 객체 연결 생성


Statement 쿼리 실행 객체 
 > executeQuery()  :: ResultSet > 선택
 > executeUpdate() :: int > 삽입,수정,삭제
 > close()

PreparedStatement // 클래스
 > executeQuery() :: ResultSet > 선택
 > executeUpdate() :: int > 삽입,수정,삭제
 > close() :: void 
CallableStatement

'"+변수명+"',
String sql = "INSERT INTO member(course,gisu,name,gender,regdate) VALUES('" + course + "','"+gisu+"','"+name+"','"+gender+"','2023-07-06')";                  



#JSTL(JSP Standard Tag Libaray)
JSP페이지에서 스크립트 요소로 인한 코드의 복잡함을 해결하기 위한 사용자 정의 태그의 표준
사용목적: 코드를 깔끔하게 하고 가독성을 높이기 위함
Core태그
<c:out>
<c:set>


#MVC(Model, View, Controller)
모델 : 애플리케이션의 데이터와 비즈니스 로직을 담는 객체
뷰: 사용자에게 모델의 정보를 보여주는 역할을 함
컨트롤러: 모델과 뷰 사이에 어떤 동작이 있을 때 조정하는 역할을 함

#기타
glyphicon

https://www.w3schools.com/bootstrap/bootstrap_ref_all_classes.asp

-----------------------------------------------------07.10------------------------------------------------------------
insert into board(name,subject,content,hit,ip,regdate) values('홍길동','연습','연습','1','127.0.0.1','2023-07-10');
http://localhost:8080/model2/controller?command=board_list
board > boardList.jsp

*한글*
import java.io.PrintWriter
response.setContentType("text/html;charset=UTF-8");
request.setCharacterEncoding("UTF-8");
PrintWriter out = response.getWriter();
out.print("출력");

http://localhost:8080/model2/controller?command=board_list
---------------------------------------------------------------------------------
***kr.jeonjucom.controllor.BoardServlet.java***안에 들어갈것

package kr.jeonjucom.controller;

import java.io.PrintWriter;
import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import kr.jeonjucom.controller.action.BoardListAction;

@WebServlet("/controller")
public class BorardServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

    public BorardServlet() {
        super();
        // TODO Auto-generated constructor stub
    }
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		response.getWriter().append("Served at: ").append(request.getContextPath());
		response.setContentType("text/html;charset=UTF-8");
		request.setCharacterEncoding("UTF-8");
		PrintWriter out = response.getWriter();
		out.print("<hr>");
		String command = request.getParameter("command");
		out.println(command);
		System.out.println(command);
		
		if(command.equals("board_list")) { // board_list 이름에 따라 클래스도 다르게 설정한다.1-1예시
			BoardListAction action = new BoardListAction();
			out.println(">board_list");
			System.out.println(">board_list");
			action.move(request, response);
		}else if(command.equals("board_write_form")) { // 1-1 예시
			BoardListAction action = new BoardListAction();
			out.println(">board_list");
			System.out.println(">board_list");
			action.move(request, response);
		}
	}
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}
}
----------------------------------------------------------------------------------
***kr.jeonjucom.controllor.action.BoardListAtion.java***안에 들어갈것

package kr.jeonjucom.controller.action;

import java.io.IOException;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class BoardListAction { //위로 있는 1-1예시에 따라 클래스명을 고친다.

	public void move(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException{
		String url ="/board/boardList.jsp";
		RequestDispatcher dispatcher = request.getRequestDispatcher(url);
		dispatcher.forward(request,response);
	}
}
---------------------------------------------------------------------------------------
